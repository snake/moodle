{"version":3,"sources":["../src/activitychooser.js"],"names":["init","courseId","pendingPromise","Pending","registerListenerEvents","resolve","events","CustomEvents","activate","keyboardActivate","fetchModuleData","innerPromise","Promise","Repository","activityModules","fetchFooterData","footerInnerPromise","sectionId","define","document","forEach","event","addEventListener","e","target","closest","selectors","elements","sectionmodchooser","sectionDiv","section","button","caller","bodyPromise","bodyPromiseResolver","dataset","sectionid","footerData","sectionModal","buildModal","data","builtModuleData","sectionIdMapper","ChooserDialogue","displayChooser","partiallyAppliedFavouriteManager","Templates","render","templateDataBuilder","webServiceData","id","newData","JSON","parse","stringify","content_items","module","link","favourites","filter","mod","favourite","recommended","favouritesFirst","length","recommendedFirst","fallback","footer","ModalFactory","create","type","types","DEFAULT","title","body","customfootertemplate","large","templateContext","classes","then","modal","show","nullFavouriteDomManager","favouriteTabNav","modalBody","tabIndex","classList","add","contains","remove","setAttribute","favouriteTab","querySelector","regions","recommendedTabNav","defaultTabNav","focus","recommendedTab","defaultTab","moduleData","internal","favouriteArea","favouriteButtons","querySelectorAll","actions","optionActions","manageFavourite","result","find","name","newFaves","builtFaves","renderForPromise","html","js","replaceNodeContents","Array","from","element","favourited","firstElementChild","nodeToRemove","parentNode","removeChild"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A type of dialogue used as for choosing modules in a course.\n *\n * @module     core_course/activitychooser\n * @package    core_course\n * @copyright  2020 Mathew May <mathew.solutions>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as ChooserDialogue from 'core_course/local/activitychooser/dialogue';\nimport * as Repository from 'core_course/local/activitychooser/repository';\nimport selectors from 'core_course/local/activitychooser/selectors';\nimport CustomEvents from 'core/custom_interaction_events';\nimport * as Templates from 'core/templates';\nimport * as ModalFactory from 'core/modal_factory';\nimport {get_string as getString} from 'core/str';\nimport Pending from 'core/pending';\n\n/**\n * Set up the activity chooser.\n *\n * @method init\n * @param {Number} courseId Course ID to use later on in fetchModules()\n */\nexport const init = (courseId) => {\n    const pendingPromise = new Pending();\n\n    registerListenerEvents(courseId);\n\n    pendingPromise.resolve();\n};\n\n/**\n * Once a selection has been made make the modal & module information and pass it along\n *\n * @method registerListenerEvents\n * @param {Number} courseId\n */\nconst registerListenerEvents = (courseId) => {\n    const events = [\n        'click',\n        CustomEvents.events.activate,\n        CustomEvents.events.keyboardActivate\n    ];\n\n    const fetchModuleData = (() => {\n        let innerPromise = null;\n\n        return () => {\n            if (!innerPromise) {\n                innerPromise = new Promise((resolve) => {\n                    resolve(Repository.activityModules(courseId));\n                });\n            }\n\n            return innerPromise;\n        };\n    })();\n\n    const fetchFooterData = (() => {\n        let footerInnerPromise = null;\n\n        return (sectionId) => {\n            if (!footerInnerPromise) {\n                footerInnerPromise = new Promise((resolve) => {\n                    resolve(Repository.fetchFooterData(courseId, sectionId));\n                });\n            }\n\n            return footerInnerPromise;\n        };\n    })();\n\n    CustomEvents.define(document, events);\n\n    // Display module chooser event listeners.\n    events.forEach((event) => {\n        document.addEventListener(event, async(e) => {\n            if (e.target.closest(selectors.elements.sectionmodchooser)) {\n\n                // We need to know who called this.\n                // Standard courses use the ID in the main section info.\n                const sectionDiv = e.target.closest(selectors.elements.section);\n                // Front page courses need some special handling.\n                const button = e.target.closest(selectors.elements.sectionmodchooser);\n                // If we don't have a section ID use the fallback ID.\n                const caller = sectionDiv || button;\n\n                // We want to show the modal instantly but loading whilst waiting for our data.\n                let bodyPromiseResolver;\n                const bodyPromise = new Promise(resolve => {\n                    bodyPromiseResolver = resolve;\n                });\n\n                const footerData = await fetchFooterData(caller.dataset.sectionid);\n                const sectionModal = buildModal(bodyPromise, footerData);\n\n                // Now we have a modal we should start fetching data.\n                const data = await fetchModuleData();\n\n                // Apply the section id to all the module instance links.\n                const builtModuleData = sectionIdMapper(data, caller.dataset.sectionid);\n\n                ChooserDialogue.displayChooser(\n                    sectionModal,\n                    builtModuleData,\n                    partiallyAppliedFavouriteManager(data, caller.dataset.sectionid),\n                    footerData,\n                );\n\n                bodyPromiseResolver(await Templates.render(\n                    'core_course/activitychooser',\n                    templateDataBuilder(builtModuleData)\n                ));\n            }\n        });\n    });\n};\n\n/**\n * Given the web service data and an ID we want to make a deep copy\n * of the WS data then add on the section ID to the addoption URL\n *\n * @method sectionIdMapper\n * @param {Object} webServiceData Our original data from the Web service call\n * @param {Number} id The ID of the section we need to append to the links\n * @return {Array} [modules] with URL's built\n */\nconst sectionIdMapper = (webServiceData, id) => {\n    // We need to take a fresh deep copy of the original data as an object is a reference type.\n    const newData = JSON.parse(JSON.stringify(webServiceData));\n    newData.content_items.forEach((module) => {\n        module.link += '&section=' + id;\n    });\n    return newData.content_items;\n};\n\n/**\n * Given an array of modules we want to figure out where & how to place them into our template object\n *\n * @method templateDataBuilder\n * @param {Array} data our modules to manipulate into a Templatable object\n * @return {Object} Our built object ready to render out\n */\nconst templateDataBuilder = (data) => {\n    // Filter the incoming data to find favourite & recommended modules.\n    const favourites = data.filter(mod => mod.favourite === true);\n    const recommended = data.filter(mod => mod.recommended === true);\n\n    // Given the results of the above filters lets figure out what tab to set active.\n\n    // We have some favourites.\n    const favouritesFirst = !!favourites.length;\n    // Check if we have no favourites but have some recommended.\n    const recommendedFirst = !!(recommended.length && favouritesFirst === false);\n    // We have nothing fallback to show all modules.\n    const fallback = favouritesFirst === false && recommendedFirst === false;\n\n    return {\n        'default': data,\n        favourites: favourites,\n        recommended: recommended,\n        favouritesFirst: favouritesFirst,\n        recommendedFirst: recommendedFirst,\n        fallback: fallback,\n    };\n};\n\n/**\n * Given an object we want to build a modal ready to show\n *\n * @method buildModal\n * @param {Promise} bodyPromise\n * @param {String|Boolean} footer Either a footer to add or nothing\n * @return {Object} The modal ready to display immediately and render body in later.\n */\nconst buildModal = (bodyPromise, footer) => {\n    return ModalFactory.create({\n        type: ModalFactory.types.DEFAULT,\n        title: getString('addresourceoractivity'),\n        body: bodyPromise,\n        footer: footer.customfootertemplate,\n        large: true,\n        templateContext: {\n            classes: 'modchooser'\n        }\n    })\n    .then(modal => {\n        modal.show();\n        return modal;\n    });\n};\n\n/**\n * A small helper function to handle the case where there are no more favourites\n * and we need to mess a bit with the available tabs in the chooser\n *\n * @method nullFavouriteDomManager\n * @param {HTMLElement} favouriteTabNav Dom node of the favourite tab nav\n * @param {HTMLElement} modalBody Our current modals' body\n */\nconst nullFavouriteDomManager = (favouriteTabNav, modalBody) => {\n    favouriteTabNav.tabIndex = -1;\n    favouriteTabNav.classList.add('d-none');\n    // Need to set active to an available tab.\n    if (favouriteTabNav.classList.contains('active')) {\n        favouriteTabNav.classList.remove('active');\n        favouriteTabNav.setAttribute('aria-selected', 'false');\n        const favouriteTab = modalBody.querySelector(selectors.regions.favouriteTab);\n        favouriteTab.classList.remove('active');\n        const recommendedTabNav = modalBody.querySelector(selectors.regions.recommendedTabNav);\n        const defaultTabNav = modalBody.querySelector(selectors.regions.defaultTabNav);\n        if (recommendedTabNav.classList.contains('d-none') === false) {\n            recommendedTabNav.classList.add('active');\n            recommendedTabNav.setAttribute('aria-selected', 'true');\n            recommendedTabNav.tabIndex = 0;\n            recommendedTabNav.focus();\n            const recommendedTab = modalBody.querySelector(selectors.regions.recommendedTab);\n            recommendedTab.classList.add('active');\n        } else {\n            defaultTabNav.classList.add('active');\n            defaultTabNav.setAttribute('aria-selected', 'true');\n            defaultTabNav.tabIndex = 0;\n            defaultTabNav.focus();\n            const defaultTab = modalBody.querySelector(selectors.regions.defaultTab);\n            defaultTab.classList.add('active');\n        }\n\n    }\n};\n\n/**\n * Export a curried function where the builtModules has been applied.\n * We have our array of modules so we can rerender the favourites area and have all of the items sorted.\n *\n * @method partiallyAppliedFavouriteManager\n * @param {Array} moduleData This is our raw WS data that we need to manipulate\n * @param {Number} sectionId We need this to add the sectionID to the URL's in the faves area after rerender\n * @return {Function} partially applied function so we can manipulate DOM nodes easily & update our internal array\n */\nconst partiallyAppliedFavouriteManager = (moduleData, sectionId) => {\n    /**\n     * Curried function that is being returned.\n     *\n     * @param {String} internal Internal name of the module to manage\n     * @param {Boolean} favourite Is the caller adding a favourite or removing one?\n     * @param {HTMLElement} modalBody What we need to update whilst we are here\n     */\n    return async(internal, favourite, modalBody) => {\n        const favouriteArea = modalBody.querySelector(selectors.render.favourites);\n\n        // eslint-disable-next-line max-len\n        const favouriteButtons = modalBody.querySelectorAll(`[data-internal=\"${internal}\"] ${selectors.actions.optionActions.manageFavourite}`);\n        const favouriteTabNav = modalBody.querySelector(selectors.regions.favouriteTabNav);\n        const result = moduleData.content_items.find(({name}) => name === internal);\n        const newFaves = {};\n        if (result) {\n            if (favourite) {\n                result.favourite = true;\n\n                // eslint-disable-next-line camelcase\n                newFaves.content_items = moduleData.content_items.filter(mod => mod.favourite === true);\n\n                const builtFaves = sectionIdMapper(newFaves, sectionId);\n\n                const {html, js} = await Templates.renderForPromise('core_course/local/activitychooser/favourites',\n                    {favourites: builtFaves});\n\n                await Templates.replaceNodeContents(favouriteArea, html, js);\n\n                Array.from(favouriteButtons).forEach((element) => {\n                    element.classList.remove('text-muted');\n                    element.classList.add('text-primary');\n                    element.dataset.favourited = 'true';\n                    element.setAttribute('aria-pressed', true);\n                    element.firstElementChild.classList.remove('fa-star-o');\n                    element.firstElementChild.classList.add('fa-star');\n                });\n\n                favouriteTabNav.classList.remove('d-none');\n            } else {\n                result.favourite = false;\n\n                const nodeToRemove = favouriteArea.querySelector(`[data-internal=\"${internal}\"]`);\n\n                nodeToRemove.parentNode.removeChild(nodeToRemove);\n\n                Array.from(favouriteButtons).forEach((element) => {\n                    element.classList.add('text-muted');\n                    element.classList.remove('text-primary');\n                    element.dataset.favourited = 'false';\n                    element.setAttribute('aria-pressed', false);\n                    element.firstElementChild.classList.remove('fa-star');\n                    element.firstElementChild.classList.add('fa-star-o');\n                });\n                const newFaves = moduleData.content_items.filter(mod => mod.favourite === true);\n\n                if (newFaves.length === 0) {\n                    nullFavouriteDomManager(favouriteTabNav, modalBody);\n                }\n            }\n        }\n    };\n};\n"],"file":"activitychooser.min.js"}