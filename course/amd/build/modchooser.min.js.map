{"version":3,"sources":["../src/modchooser.js"],"names":["moduleInfoFormatter","moduleInfo","section","sectionid","siteTopic","document","querySelector","selectors","elements","sitetopic","siteMenu","sitemenu","window","console","log","allmodules","forEach","module","urls","addoption","sectionEventHandler","chooserSpan","sectionmodchooser","events","CustomEvents","activate","keyboardActivate","define","builtModuleInfo","event","modal","ChooserDialogue","displayChooser","then","modalr","addEventListener","e","preventDefault","show","setupForSection","querySelectorAll","init","courseid","Promise","all","Repository","activityModules"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A type of dialogue used as for choosing modules in a course.\n *\n * @module     core_course/modchooser\n * @package    core_course\n * @copyright  2019 Mihail Geshoski <mihail@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      3.9\n */\n\nimport * as ChooserDialogue from 'core_course/chooser_dialogue';\nimport CustomEvents from 'core/custom_interaction_events';\nimport * as Repository from 'core_course/local/chooser/repository';\nimport selectors from 'core_course/local/chooser/selectors';\n\n/**\n * Mutate the moduleInfo {} to add the section onto the addoption url.\n *\n * @method moduleInfoFormatter\n * @param {EventFacade} e Triggering Event\n * @param {Object} moduleInfo Object containing the data required by the chooser template\n * @param {HTMLElement} section The selector to limit scope to\n *\n * @return {Object} moduleInfo Object that now has the section information attached\n */\nconst moduleInfoFormatter = (moduleInfo, section) => {\n    let sectionid;\n    // Set the section for this version of the dialogue.\n\n    const siteTopic = document.querySelector(`${selectors.elements.sitetopic}`);\n    const siteMenu = document.querySelector(`${selectors.elements.sitemenu}`);\n\n    if (siteTopic !== null) {\n        // The site topic has a sectionid of 1.\n        sectionid = 1;\n    } else if (siteMenu !== null) {\n        // The block site menu has a sectionid of 0.\n        sectionid = 0;\n    } else  {\n        //const caller = section.querySelector(`#${e.target.id}`);\n        sectionid =  0;\n        window.console.log(sectionid);\n        window.console.log(section);\n    }\n\n    // If the sectionid exists, append the section parameter to the add module url.\n    if (sectionid !== undefined) {\n        moduleInfo.allmodules.forEach((module) => {\n            module.urls.addoption += '&section=' + sectionid;\n        });\n    }\n    return moduleInfo;\n};\n\n/**\n * For each sections 'Add activity or resource' we want to wrap the dom into a link\n * and add some event handlers for click and keyboards\n *\n * @method sectionEventHandler\n * @param {HTMLElement} section The selector to limit scope to\n * @param {Object} moduleInfo Object containing the data required by the chooser template\n */\nconst sectionEventHandler = (section, moduleInfo) => {\n    const chooserSpan = section.querySelector(selectors.elements.sectionmodchooser);\n    if (chooserSpan === null) {\n        return;\n    }\n\n    const events = [\n        'click',\n        CustomEvents.events.activate,\n        CustomEvents.events.keyboardActivate\n    ];\n\n    CustomEvents.define(chooserSpan, events);\n\n    const builtModuleInfo = moduleInfoFormatter(moduleInfo, section);\n\n    // Display module chooser event listeners.\n    events.forEach((event) => {\n\n        //ChooserDialogue.displayChooser(event, builtModuleInfo);\n\n        var modal = ChooserDialogue.displayChooser(builtModuleInfo);\n        modal.then(function(modalr) {\n            window.console.log(modalr);\n            chooserSpan.addEventListener(event, (e) => {\n                e.preventDefault();\n\n                modalr.show();\n            });\n        });\n\n    });\n};\n\n/**\n * Find all instances of sections on the current course page and then fire off to our event builder\n *\n * @method setupForSection\n * @param {Object} moduleInfo Object containing the data required by the chooser template\n */\nconst setupForSection = (moduleInfo) => {\n\n    window.console.log('here 2');\n\n    // TODO: check if needed.\n    document.querySelectorAll(selectors.elements.sitetopic).forEach((section) => {\n        sectionEventHandler(section, moduleInfo);\n    });\n\n    // Setup for standard course topics.\n    document.querySelectorAll(selectors.elements.section).forEach((section) => {\n        sectionEventHandler(section, moduleInfo);\n    });\n\n    // TODO: check if needed.\n    document.querySelectorAll(selectors.elements.sitemenu).forEach((section) => {\n        sectionEventHandler(section, moduleInfo);\n    });\n};\n\n/**\n * Set up the activity chooser.\n *\n * @method init\n * @param {int} courseid Course ID for the course we want modules for\n */\nexport const init = async(courseid) => {\n    const [\n        moduleInfo\n    ] = await Promise.all([\n        Repository.activityModules(courseid)\n    ]);\n\n    setupForSection(moduleInfo);\n};\n"],"file":"modchooser.min.js"}