{"version":3,"sources":["../src/modchooser.js"],"names":["moduleInfoFormatter","e","moduleInfo","section","sectionid","siteTopic","document","querySelector","selectors","elements","sitetopic","siteMenu","sitemenu","target","id","caller","dataset","allmodules","forEach","module","urls","addoption","sectionEventHandler","chooserSpan","sectionmodchooser","events","CustomEvents","activate","keyboardActivate","define","event","addEventListener","preventDefault","builtModuleInfo","ChooserDialogue","displayChooser","setupForSection","querySelectorAll","init","courseid","Promise","all","Repository","activityModules"],"mappings":"0RAyBA,OACA,OACA,OACA,O,4lCAYMA,CAAAA,CAAmB,CAAG,SAACC,CAAD,CAAIC,CAAJ,CAAgBC,CAAhB,CAA4B,IAChDC,CAAAA,CADgD,CAI9CC,CAAS,CAAGC,QAAQ,CAACC,aAAT,WAA0BC,UAAUC,QAAV,CAAmBC,SAA7C,EAJkC,CAK9CC,CAAQ,CAAGL,QAAQ,CAACC,aAAT,WAA0BC,UAAUC,QAAV,CAAmBG,QAA7C,EALmC,CAOpD,GAAkB,IAAd,GAAAP,CAAJ,CAAwB,CAEpBD,CAAS,CAAG,CACf,CAHD,IAGO,IAAiB,IAAb,GAAAO,CAAJ,CAAuB,CAE1BP,CAAS,CAAG,CACf,CAHM,IAGA,IAAIH,CAAC,CAACY,MAAF,CAASC,EAAb,CAAiB,CACpB,GAAMC,CAAAA,CAAM,CAAGZ,CAAO,CAACI,aAAR,YAA0BN,CAAC,CAACY,MAAF,CAASC,EAAnC,EAAf,CACAV,CAAS,CAAGW,CAAM,CAACC,OAAP,CAAeZ,SAC9B,CAGD,GAAIA,CAAS,SAAb,CAA6B,CACzBF,CAAU,CAACe,UAAX,CAAsBC,OAAtB,CAA8B,SAACC,CAAD,CAAY,CACtCA,CAAM,CAACC,IAAP,CAAYC,SAAZ,EAAyB,YAAcjB,CAC1C,CAFD,CAGH,CACD,MAAOF,CAAAA,CACV,C,CAUKoB,CAAmB,CAAG,SAACnB,CAAD,CAAUD,CAAV,CAAyB,CACjD,GAAMqB,CAAAA,CAAW,CAAGpB,CAAO,CAACI,aAAR,CAAsBC,UAAUC,QAAV,CAAmBe,iBAAzC,CAApB,CACA,GAAoB,IAAhB,GAAAD,CAAJ,CAA0B,CACtB,MACH,CAED,GAAME,CAAAA,CAAM,CAAG,CACX,OADW,CAEXC,UAAaD,MAAb,CAAoBE,QAFT,CAGXD,UAAaD,MAAb,CAAoBG,gBAHT,CAAf,CAMAF,UAAaG,MAAb,CAAoBN,CAApB,CAAiCE,CAAjC,EAGAA,CAAM,CAACP,OAAP,CAAe,SAACY,CAAD,CAAW,CACtBP,CAAW,CAACQ,gBAAZ,CAA6BD,CAA7B,CAAoC,SAAC7B,CAAD,CAAO,CACvCA,CAAC,CAAC+B,cAAF,GACA,GAAMC,CAAAA,CAAe,CAAGjC,CAAmB,CAACC,CAAD,CAAIC,CAAJ,CAAgBC,CAAhB,CAA3C,CACA+B,CAAe,CAACC,cAAhB,CAA+BlC,CAA/B,CAAkCgC,CAAlC,CACH,CAJD,CAKH,CAND,CAOH,C,CAQKG,CAAe,CAAG,SAAClC,CAAD,CAAgB,CAEpCI,QAAQ,CAAC+B,gBAAT,CAA0B7B,UAAUC,QAAV,CAAmBC,SAA7C,EAAwDQ,OAAxD,CAAgE,SAACf,CAAD,CAAa,CACzEmB,CAAmB,CAACnB,CAAD,CAAUD,CAAV,CACtB,CAFD,EAKAI,QAAQ,CAAC+B,gBAAT,CAA0B7B,UAAUC,QAAV,CAAmBN,OAA7C,EAAsDe,OAAtD,CAA8D,SAACf,CAAD,CAAa,CACvEmB,CAAmB,CAACnB,CAAD,CAAUD,CAAV,CACtB,CAFD,EAKAI,QAAQ,CAAC+B,gBAAT,CAA0B7B,UAAUC,QAAV,CAAmBG,QAA7C,EAAuDM,OAAvD,CAA+D,SAACf,CAAD,CAAa,CACxEmB,CAAmB,CAACnB,CAAD,CAAUD,CAAV,CACtB,CAFD,CAGH,C,CAQYoC,CAAI,4CAAG,WAAMC,CAAN,4GAGNC,CAAAA,OAAO,CAACC,GAAR,CAAY,CAClBC,CAAU,CAACC,eAAX,CAA2BJ,CAA3B,CADkB,CAAZ,CAHM,0BAEZrC,CAFY,MAOhBkC,CAAe,CAAClC,CAAD,CAAf,CAPgB,wCAAH,uD","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A type of dialogue used as for choosing modules in a course.\n *\n * @module     core_course/modchooser\n * @package    core_course\n * @copyright  2019 Mihail Geshoski <mihail@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      3.9\n */\n\nimport * as ChooserDialogue from 'core_course/chooser_dialogue';\nimport CustomEvents from 'core/custom_interaction_events';\nimport * as Repository from 'core_course/local/chooser/repository';\nimport selectors from 'core_course/local/chooser/selectors';\n\n/**\n * Mutate the moduleInfo {} to add the section onto the addoption url.\n *\n * @method moduleInfoFormatter\n * @param {EventFacade} e Triggering Event\n * @param {Object} moduleInfo Object containing the data required by the chooser template\n * @param {HTMLElement} section The selector to limit scope to\n *\n * @return {Object} moduleInfo Object that now has the section information attached\n */\nconst moduleInfoFormatter = (e, moduleInfo, section) => {\n    let sectionid;\n    // Set the section for this version of the dialogue.\n\n    const siteTopic = document.querySelector(`${selectors.elements.sitetopic}`);\n    const siteMenu = document.querySelector(`${selectors.elements.sitemenu}`);\n\n    if (siteTopic !== null) {\n        // The site topic has a sectionid of 1.\n        sectionid = 1;\n    } else if (siteMenu !== null) {\n        // The block site menu has a sectionid of 0.\n        sectionid = 0;\n    } else if (e.target.id) {\n        const caller = section.querySelector(`#${e.target.id}`);\n        sectionid = caller.dataset.sectionid;\n    }\n\n    // If the sectionid exists, append the section parameter to the add module url.\n    if (sectionid !== undefined) {\n        moduleInfo.allmodules.forEach((module) => {\n            module.urls.addoption += '&section=' + sectionid;\n        });\n    }\n    return moduleInfo;\n};\n\n/**\n * For each sections 'Add activity or resource' we want to wrap the dom into a link\n * and add some event handlers for click and keyboards\n *\n * @method sectionEventHandler\n * @param {HTMLElement} section The selector to limit scope to\n * @param {Object} moduleInfo Object containing the data required by the chooser template\n */\nconst sectionEventHandler = (section, moduleInfo) => {\n    const chooserSpan = section.querySelector(selectors.elements.sectionmodchooser);\n    if (chooserSpan === null) {\n        return;\n    }\n\n    const events = [\n        'click',\n        CustomEvents.events.activate,\n        CustomEvents.events.keyboardActivate\n    ];\n\n    CustomEvents.define(chooserSpan, events);\n\n    // Display module chooser event listeners.\n    events.forEach((event) => {\n        chooserSpan.addEventListener(event, (e) => {\n            e.preventDefault();\n            const builtModuleInfo = moduleInfoFormatter(e, moduleInfo, section);\n            ChooserDialogue.displayChooser(e, builtModuleInfo);\n        });\n    });\n};\n\n/**\n * Find all instances of sections on the current course page and then fire off to our event builder\n *\n * @method setupForSection\n * @param {Object} moduleInfo Object containing the data required by the chooser template\n */\nconst setupForSection = (moduleInfo) => {\n    // TODO: check if needed.\n    document.querySelectorAll(selectors.elements.sitetopic).forEach((section) => {\n        sectionEventHandler(section, moduleInfo);\n    });\n\n    // Setup for standard course topics.\n    document.querySelectorAll(selectors.elements.section).forEach((section) => {\n        sectionEventHandler(section, moduleInfo);\n    });\n\n    // TODO: check if needed.\n    document.querySelectorAll(selectors.elements.sitemenu).forEach((section) => {\n        sectionEventHandler(section, moduleInfo);\n    });\n};\n\n/**\n * Set up the activity chooser.\n *\n * @method init\n * @param {int} courseid Course ID for the course we want modules for\n */\nexport const init = async(courseid) => {\n    const [\n        moduleInfo\n    ] = await Promise.all([\n        Repository.activityModules(courseid)\n    ]);\n\n    setupForSection(moduleInfo);\n};\n"],"file":"modchooser.min.js"}