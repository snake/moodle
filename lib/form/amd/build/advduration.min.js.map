{"version":3,"sources":["../src/advduration.js"],"names":["init","elementId","container","document","getElementById","FIELDS","name","id","rolloverUpperLimit","foundElements","highestOrderUnit","parentElements","key","fieldInfo","element","querySelector","push","setAttribute","parentFieldInfo","parentElement","allParentElements","slice","addEventListener","spinEventHandler","bind","togglerElement","event","target","value","parseInt","dispatchEvent","Event","allZero"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A javascript module to enhance the advduration form element.\n *\n * @copyright  2019 Jake Dallimore <jrhdallimore@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nexport const init = (elementId) => {\n    const container = document.getElementById(elementId);\n    const FIELDS = [\n        {\n            name: 'weeks',\n            id: elementId + '_w',\n            rolloverUpperLimit: null\n        },\n        {\n            name: 'days',\n            id: elementId + '_d',\n            rolloverUpperLimit: 7\n        },\n        {\n            name: 'hours',\n            id: elementId + '_h',\n            rolloverUpperLimit: 24\n        },\n        {\n            name: 'minutes',\n            id: elementId + '_i',\n            rolloverUpperLimit: 60\n        },\n        {\n            name: 'seconds',\n            id: elementId + '_s',\n            rolloverUpperLimit: 60\n        }\n    ];\n    const TOGGLER = elementId + '_toggle';\n\n    let foundElements = [];\n\n    // For each potential element, check to see if it's in the DOM and bind event handlers.\n    let highestOrderUnit = null; // This records the highest unit in the current duration widget.\n    let parentElements = []; // Contains all elements we've already seen in the loop (parents of the current element).\n    for (let key in FIELDS) {\n        let fieldInfo = FIELDS[key];\n        let element = container.querySelector(`#${FIELDS[key].id}`);\n        if (element) {\n            foundElements.push(element);\n            // Don't add an event handler for the highest order unit being displayed.\n            // This field has no parent to affect.\n            if (!highestOrderUnit) {\n                highestOrderUnit = fieldInfo.name;\n                element.setAttribute('min', '0'); // Disable negative rollover for the highest order element.\n                continue;\n            }\n\n            // At this point, the highest order unit has been found in the DOM,\n            // so every element is guaranteed to have a parent at the -1 position.\n            const parentFieldInfo = FIELDS[key - 1];\n            const parentElement = document.getElementById(parentFieldInfo.id);\n            parentElements.push(parentElement);\n            const allParentElements = parentElements.slice(); // The current element's parents.\n            element.addEventListener('input', spinEventHandler.bind(null, fieldInfo, parentElement, allParentElements), false);\n        }\n    }\n\n    // Assign the enable/disable handler to the toggler element.\n    let togglerElement = container.querySelector(`#${TOGGLER}`);\n    if (togglerElement) {\n        //togglerElement.addEventListener('change', toggleEventHandler.bind(null, foundElements), false);\n    }\n};\n\n/*const toggleEventHandler = (elements, event) => {\n    const target = event.target;\n    for (let key in elements) {\n        elements[key].disabled = !target.checked;\n    }\n};\n*/\nconst spinEventHandler = (fieldInfo, parentElement, allParentElements, event) => {\n    const target = event.target;\n\n    // Adjust the parent element on rollover.\n    if (target.value >= fieldInfo.rolloverUpperLimit) {\n        // Incrementing is unconditional rollover. Always rollover and increment the parent value.\n        target.value = 0;\n        parentElement.value = parseInt(parentElement.value) + 1;\n        parentElement.dispatchEvent(new Event('input'));\n    } else if (target.value < 0) {\n        // Decrementing is conditional rollover. We can't decrement beyond 0.\n        if (parentElement.value > 0) {\n            // If the parent has a positive value, allow rollover of target and decrement the parent value.\n            target.value = fieldInfo.rolloverUpperLimit - 1;\n            parentElement.value = parseInt(parentElement.value) - 1;\n            parentElement.dispatchEvent(new Event('input'));\n        } else if (parentElement.value <= 0) {\n            // If the parent has a zero value, only rollover target and reduce the parent value\n            // if a non-zero-value ancestor of the parent exists.\n            let allZero = true;\n            for (let key in allParentElements) {\n                if (parseInt(allParentElements[key].value) != 0) {\n                    allZero = false;\n                    break;\n                }\n            }\n            if (allZero) {\n                target.value = 0;\n            } else {\n                parentElement.value = parseInt(parentElement.value) - 1;\n                parentElement.dispatchEvent(new Event('input'));\n                target.value = fieldInfo.rolloverUpperLimit - 1;\n            }\n        }\n    }\n};\n"],"file":"advduration.min.js"}