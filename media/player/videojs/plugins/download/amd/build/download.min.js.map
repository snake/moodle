{"version":3,"sources":["../src/download.js"],"names":["define","videojs","defaults","beforeElement","textControl","name","downloadURL","vjsButton","getComponent","DownloadButton","p","player","window","open","options_","currentSrc","trigger","onPlayerReady","options","DButton","controlBar","addChild","controlText","el","insertBefore","getChild","addClass","vjsdownload","ready","mergeOptions","registerPlugin"],"mappings":"+1DAsBAA,OAAM,6BAAC,CAAC,0BAAD,CAAD,CAA+B,SAASC,CAAT,CAAkB,IAO7CC,CAAAA,CAAQ,CAAG,CACfC,aAAa,CAAE,kBADA,CAEfC,WAAW,CAAE,gBAFE,CAGfC,IAAI,CAAE,gBAHS,CAIfC,WAAW,CAAE,IAJE,CAPkC,CAc7CC,CAAS,CAAGN,CAAO,CAACO,YAAR,CAAqB,QAArB,CAdiC,CAgB7CC,CAhB6C,qNAwBjC,CACd,mGACD,CA1BgD,iDAiCnC,CACZ,GAAIC,CAAAA,CAAC,CAAG,KAAKC,MAAL,EAAR,CAEAC,MAAM,CAACC,IAAP,CAAY,KAAKC,QAAL,CAAcR,WAAd,EAA6BI,CAAC,CAACK,UAAF,EAAzC,CAAyD,UAAzD,EACAL,CAAC,CAACM,OAAF,CAAU,eAAV,CACD,CAtCgD,cAgBtBT,CAhBsB,EAqD7CU,CAAa,CAAG,SAACN,CAAD,CAASO,CAAT,CAAqB,CACzC,GAAIC,CAAAA,CAAO,CAAGR,CAAM,CAACS,UAAP,CAAkBC,QAAlB,CAA2B,GAAIZ,CAAAA,CAAJ,CAAmBE,CAAnB,CAA2BO,CAA3B,CAA3B,CAAgE,EAAhE,CAAd,CAEAC,CAAO,CAACG,WAAR,CAAoBJ,CAAO,CAACd,WAA5B,EAEAO,CAAM,CAACS,UAAP,CAAkBG,EAAlB,GAAuBC,YAAvB,CAAoCL,CAAO,CAACI,EAAR,EAApC,CACEZ,CAAM,CAACS,UAAP,CAAkBK,QAAlB,CAA2BP,CAAO,CAACf,aAAnC,EAAkDoB,EAAlD,EADF,EAGAZ,CAAM,CAACe,QAAP,CAAgB,iBAAhB,CACD,CA9DkD,CA4E7CC,CAAW,CAAG,SAAST,CAAT,CAAkB,YACpC,KAAKU,KAAL,CAAW,UAAM,CACfX,CAAa,CAAC,CAAD,CAAOhB,CAAO,CAAC4B,YAAR,CAAqB3B,CAArB,CAA+BgB,CAA/B,CAAP,CACd,CAFD,CAGD,CAhFkD,CAmFnDjB,CAAO,CAAC6B,cAAR,CAAuB,UAAvB,CAAmCH,CAAnC,EAMD,MAAOA,CAAAA,CAET,CA3FK,CAAN","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * VideoJS download plugin.\n *\n * @package    videojs_download\n * @copyright  2019 Matt Porritt <mattp@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['media_videojs/video-lazy'], function(videojs) {\n\n/*\n * START NATIVE PLUGIN CODE.\n */\n\n // Default options for the plugin.\n    const defaults = {\n      beforeElement: 'fullscreenToggle',\n      textControl: 'Download video',\n      name: 'downloadButton',\n      downloadURL: null\n    };\n\n    const vjsButton = videojs.getComponent('Button');\n\n    class DownloadButton extends vjsButton {\n\n      /**\n      * Allow sub components to stack CSS class names\n      *\n      * @return {String} The constructed class name\n      * @method buildCSSClass\n      */\n      buildCSSClass() {\n        return `vjs-vjsdownload ${super.buildCSSClass()}`;\n      }\n\n      /**\n      * Handles click for full screen\n      *\n      * @method handleClick\n      */\n      handleClick() {\n        let p = this.player();\n\n        window.open(this.options_.downloadURL || p.currentSrc(), 'Download');\n        p.trigger('downloadvideo');\n      }\n\n    }\n\n    /**\n     * Function to invoke when the player is ready.\n     *\n     * This is a great place for your plugin to initialize itself. When this\n     * function is called, the player will have its DOM and child components\n     * in place.\n     *\n     * @function onPlayerReady\n     * @param    {Player} player\n     * @param    {Object} [options={}]\n     */\n    const onPlayerReady = (player, options) => {\n      let DButton = player.controlBar.addChild(new DownloadButton(player, options), {});\n\n      DButton.controlText(options.textControl);\n\n      player.controlBar.el().insertBefore(DButton.el(),\n        player.controlBar.getChild(options.beforeElement).el());\n\n      player.addClass('vjs-vjsdownload');\n    };\n\n    /**\n     * A video.js plugin.\n     *\n     * In the plugin function, the value of `this` is a video.js `Player`\n     * instance. You cannot rely on the player being in a \"ready\" state here,\n     * depending on how the plugin is invoked. This may or may not be important\n     * to you; if not, remove the wait for \"ready\"!\n     *\n     * @function vjsdownload\n     * @param    {Object} [options={}]\n     *           An object of options left to the plugin author to define.\n     */\n    const vjsdownload = function(options) {\n      this.ready(() => {\n        onPlayerReady(this, videojs.mergeOptions(defaults, options));\n      });\n    };\n\n    // Register the plugin with video.js.\n    videojs.registerPlugin('download', vjsdownload);\n\n/*\n * END NATIVE PLUGIN CODE.\n */\n\n   return vjsdownload;\n\n});\n"],"file":"download.min.js"}