{"version":3,"sources":["../src/download.js"],"names":["define","videojs","defaults","beforeElement","textControl","name","downloadURL","vjsButton","getComponent","DownloadButton","tag","props","atts","el","innerHTML","p","player","window","open","options_","currentSrc","trigger","onPlayerReady","options","registerComponent","DButton","getChild","addChild","controlText","controlBar","insertBefore","addClass","vjsdownload","ready","mergeOptions","registerPlugin"],"mappings":"+1DAsBAA,OAAM,6BAAC,CAAC,0BAAD,CAAD,CAA+B,SAASC,CAAT,CAAkB,IAO7CC,CAAAA,CAAQ,CAAG,CACfC,aAAa,CAAE,kBADA,CAEfC,WAAW,CAAE,gBAFE,CAGfC,IAAI,CAAE,gBAHS,CAIfC,WAAW,CAAE,IAJE,CAPkC,CAc7CC,CAAS,CAAGN,CAAO,CAACO,YAAR,CAAqB,QAArB,CAdiC,CAgB7CC,CAhB6C,2MAkBC,IAAvCC,CAAAA,CAAuC,wDAAjC,QAAiC,CAAvBC,CAAuB,wDAAf,EAAe,CAAXC,CAAW,wDAAJ,EAAI,CACxCC,CAAE,8DAAkBH,CAAlB,CAAuBC,CAAvB,CAA8BC,CAA9B,CADsC,CAE5CC,CAAE,CAACC,SAAH,CAAe,8BAAf,CACA,MAAOD,CAAAA,CACV,CAtB8C,qDA8BjC,CACd,mGACD,CAhCgD,iDAuCnC,CACZ,GAAIE,CAAAA,CAAC,CAAG,KAAKC,MAAL,EAAR,CAEAC,MAAM,CAACC,IAAP,CAAY,KAAKC,QAAL,CAAcb,WAAd,EAA6BS,CAAC,CAACK,UAAF,EAAzC,CAAyD,UAAzD,EACAL,CAAC,CAACM,OAAF,CAAU,eAAV,CACD,CA5CgD,cAgBtBd,CAhBsB,EA2D7Ce,CAAa,CAAG,SAACN,CAAD,CAASO,CAAT,CAAqB,CACvCtB,CAAO,CAACuB,iBAAR,CAA0B,UAA1B,CAAsCf,CAAtC,EAEA,GAAIgB,CAAAA,CAAO,CAAGT,CAAM,CAACU,QAAP,CAAgB,YAAhB,EAA8BC,QAA9B,CAAuC,UAAvC,CAAmD,EAAnD,CAAd,CAEAF,CAAO,CAACG,WAAR,CAAoBL,CAAO,CAACnB,WAA5B,EAEAY,CAAM,CAACa,UAAP,CAAkBhB,EAAlB,GAAuBiB,YAAvB,CACIL,CAAO,CAACZ,EAAR,EADJ,CAEIG,CAAM,CAACa,UAAP,CAAkBH,QAAlB,CAA2BH,CAAO,CAACpB,aAAnC,EAAkDU,EAAlD,EAFJ,EAKAG,CAAM,CAACe,QAAP,CAAgB,iBAAhB,CACH,CAxEkD,CAsF7CC,CAAW,CAAG,SAAST,CAAT,CAAkB,YACpC,KAAKU,KAAL,CAAW,UAAM,CACfX,CAAa,CAAC,CAAD,CAAOrB,CAAO,CAACiC,YAAR,CAAqBhC,CAArB,CAA+BqB,CAA/B,CAAP,CACd,CAFD,CAGD,CA1FkD,CA6FnDtB,CAAO,CAACkC,cAAR,CAAuB,UAAvB,CAAmCH,CAAnC,EAMD,MAAOA,CAAAA,CAET,CArGK,CAAN","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * VideoJS download plugin.\n *\n * @package    videojs_download\n * @copyright  2019 Matt Porritt <mattp@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['media_videojs/video-lazy'], function(videojs) {\n\n/*\n * START NATIVE PLUGIN CODE.\n */\n\n // Default options for the plugin.\n    const defaults = {\n      beforeElement: 'fullscreenToggle',\n      textControl: 'Download video',\n      name: 'downloadButton',\n      downloadURL: null\n    };\n\n    const vjsButton = videojs.getComponent('Button');\n\n    class DownloadButton extends vjsButton {\n\n        createEl(tag = 'button', props = {}, atts = {}) {\n            let el = super.createEl(tag, props, atts);\n            el.innerHTML = \"<i class=\\\"fa fa-download\\\">\";\n            return el;\n        }\n\n      /**\n      * Allow sub components to stack CSS class names\n      *\n      * @return {String} The constructed class name\n      * @method buildCSSClass\n      */\n      buildCSSClass() {\n        return `vjs-vjsdownload ${super.buildCSSClass()}`;\n      }\n\n      /**\n      * Handles click for full screen\n      *\n      * @method handleClick\n      */\n      handleClick() {\n        let p = this.player();\n\n        window.open(this.options_.downloadURL || p.currentSrc(), 'Download');\n        p.trigger('downloadvideo');\n      }\n\n    }\n\n    /**\n     * Function to invoke when the player is ready.\n     *\n     * This is a great place for your plugin to initialize itself. When this\n     * function is called, the player will have its DOM and child components\n     * in place.\n     *\n     * @function onPlayerReady\n     * @param    {Player} player\n     * @param    {Object} [options={}]\n     */\n    const onPlayerReady = (player, options) => {\n        videojs.registerComponent('dlButton', DownloadButton);\n\n        let DButton = player.getChild('controlBar').addChild('dlButton', {});\n\n        DButton.controlText(options.textControl);\n\n        player.controlBar.el().insertBefore(\n            DButton.el(),\n            player.controlBar.getChild(options.beforeElement).el()\n        );\n\n        player.addClass('vjs-vjsdownload');\n    };\n\n    /**\n     * A video.js plugin.\n     *\n     * In the plugin function, the value of `this` is a video.js `Player`\n     * instance. You cannot rely on the player being in a \"ready\" state here,\n     * depending on how the plugin is invoked. This may or may not be important\n     * to you; if not, remove the wait for \"ready\"!\n     *\n     * @function vjsdownload\n     * @param    {Object} [options={}]\n     *           An object of options left to the plugin author to define.\n     */\n    const vjsdownload = function(options) {\n      this.ready(() => {\n        onPlayerReady(this, videojs.mergeOptions(defaults, options));\n      });\n    };\n\n    // Register the plugin with video.js.\n    videojs.registerPlugin('download', vjsdownload);\n\n/*\n * END NATIVE PLUGIN CODE.\n */\n\n   return vjsdownload;\n\n});\n"],"file":"download.min.js"}