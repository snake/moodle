<?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

namespace core_ltix\local\lticore\token;

use Firebase\JWT\JWT;
use Firebase\JWT\JWK;

/**
 * Models the non-encoded claims data in the body of a JWT.
 *
 * Helpful for building a set of claims prior to encoding into a JWT, without needing to juggle arrays.
 *
 * @package    core_ltix
 * @copyright  2024 Jake Dallimore <jrhdallimore@gmail.com>
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
final class lti_token {

    public function __construct(private array $claims) {
    }

    public static function from_jwt_with_keyset(string $jwt, array $keyset): self {
        // Validate + decode the JWT into its component claims.
        $claims = JWT::decode($jwt, JWK::parseKeySet($keyset));
        $claims = json_decode(json_encode($claims), true); // Convert to array.

        return new self($claims);
    }

    public function add_claim(string $name, string|object|array $value): self {
        $this->claims[$name] = $value;
        return $this;
    }

    public function get_claim(string $name): string|object|array|null {
        return $this->claims[$name] ?? null;
    }

    public function to_jwt(string $privatekey, string $alg = 'RS256', ?string $kid = null,
            array $generatedclaims = ['exp', 'iat']): string {

        // Add claims which are set at the time of JWT creation, based on their inclusion in the $generatedclaim parameter.
        // Note: These will override any claims of the same name set earlier.
        // To exclude a claim from auto-generation, remove it from the $generatedclaims array.
        // - exp - always generated by default.
        // - iat - always generated by default.
        // - jti - not used by default, since this class is mainly used to generate a launch id_token, where jti isn't required.
        // - nbf - not used by default, since this class is mainly used to generate a launch id_token, where nbf isn't required.
        $now = time();
        $claims = array_merge(
            $this->claims,
            [
                ...(in_array('exp', $generatedclaims) ? ['exp' => $now + 60] : []),
                ...(in_array('iat', $generatedclaims) ? ['iat' => $now] : []),
                // TODO: consider adding support for jti and nbf generation to make this token more versatile in lti usage.
                //  If these are included, it would allow this class to be used for things like a JWT access token, as defined in
                //  the spec (), where 'jti' is also a required claim.
                //  nbf should use $now, whereas jti should be generated randomly.
            ]
        );

        return JWT::encode($claims, $privatekey, $alg, $kid);
    }
}
